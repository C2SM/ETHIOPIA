<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 --><!-- Title: test_config_small_no_icon Pages: 1 --><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="768pt" height="272pt" viewBox="0.00 0.00 768.00 272.00" onload="addInteractivity(evt)">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 268)">
<title>test_config_small_no_icon</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-268 764,-268 764,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_bimonthly_tasks_3</title>
<g id="a_clust1"><a xlink:title="bimonthly_tasks&#10; &#160;date: 2026-05-01 00:00:00">
<polygon fill="#f6f5f4" stroke="transparent" points="512,-72 512,-264 760,-264 760,-72 512,-72"/>
<text text-anchor="middle" x="636" y="-247.2" font-family="Fira Sans" font-size="16.00">bimonthly_tasks</text>
<text text-anchor="middle" x="636" y="-229.2" font-family="Fira Sans" font-size="16.00"> &#160;date: 2026-05-01 00:00:00</text>
</a>
</g>
</g>
<g id="clust2" class="cluster">
<title>cluster_bimonthly_tasks_1</title>
<g id="a_clust2"><a xlink:title="bimonthly_tasks&#10; &#160;date: 2026-01-01 00:00:00">
<polygon fill="#f6f5f4" stroke="transparent" points="0,0 0,-168 248,-168 248,0 0,0"/>
<text text-anchor="middle" x="124" y="-151.2" font-family="Fira Sans" font-size="16.00">bimonthly_tasks</text>
<text text-anchor="middle" x="124" y="-133.2" font-family="Fira Sans" font-size="16.00"> &#160;date: 2026-01-01 00:00:00</text>
</a>
</g>
</g>
<g id="clust3" class="cluster">
<title>cluster_bimonthly_tasks_2</title>
<g id="a_clust3"><a xlink:title="bimonthly_tasks&#10; &#160;date: 2026-03-01 00:00:00">
<polygon fill="#f6f5f4" stroke="transparent" points="256,-72 256,-264 504,-264 504,-72 256,-72"/>
<text text-anchor="middle" x="380" y="-247.2" font-family="Fira Sans" font-size="16.00">bimonthly_tasks</text>
<text text-anchor="middle" x="380" y="-229.2" font-family="Fira Sans" font-size="16.00"> &#160;date: 2026-03-01 00:00:00</text>
</a>
</g>
</g>
<!-- Data(name=&#39;restart&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 5, 1, 0, 0)}, type=&#39;file&#39;, src=&#39;restart&#39;, format=None, available=False) -->
<g id="node1" class="node">
<title>Data(name='restart', coordinates={'date': datetime.datetime(2026, 5, 1, 0, 0)}, type='file', src='restart', format=None, available=False)</title>
<g id="a_node1"><a xlink:title="restart&#10; &#160;date: 2026-05-01 00:00:00">
<ellipse fill="#d9ebff" stroke="#001933" stroke-width="2" cx="636" cy="-98" rx="40.5" ry="18"/>
<text text-anchor="middle" x="636" y="-94.3" font-family="Fira Sans" font-size="14.00" fill="#001226">restart</text>
</a>
</g>
</g>
<!-- ShellTask(name=&#39;shell_task&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 5, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[], outputs=[Data(name=&#39;restart&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 5, 1, 0, 0)}, type=&#39;file&#39;, src=&#39;restart&#39;, format=None, available=False)], wait_on=[], command=&#39;tests/files/scripts/shell_task.sh&#39;, cli_arguments=_CliArgsBaseModel(positional=[&#39;data1&#39;, &#39;data2&#39;], keyword={&#39;&#45;&#45;restart&#39;: &#39;restart&#39;, &#39;&#45;&#45;init&#39;: &#39;initial_conditions&#39;}, flags=[&#39;&#45;&#45;test&#39;], source_file=None), src=None) -->
<g id="node2" class="node">
<title>ShellTask(name='shell_task', coordinates={'date': datetime.datetime(2026, 5, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[], outputs=[Data(name='restart', coordinates={'date': datetime.datetime(2026, 5, 1, 0, 0)}, type='file', src='restart', format=None, available=False)], wait_on=[], command='tests/files/scripts/shell_task.sh', cli_arguments=_CliArgsBaseModel(positional=['data1', 'data2'], keyword={'--restart': 'restart', '--init': 'initial_conditions'}, flags=['--test'], source_file=None), src=None)</title>
<g id="a_node2"><a xlink:title="shell_task&#10; &#160;date: 2026-05-01 00:00:00">
<polygon fill="#ffd9e0" stroke="#330009" stroke-width="2" points="678.5,-212 593.5,-212 593.5,-176 678.5,-176 678.5,-212"/>
<text text-anchor="middle" x="636" y="-190.3" font-family="Fira Sans" font-size="14.00" fill="#260007">shell_task</text>
</a>
</g>
</g>
<!-- ShellTask(name=&#39;shell_task&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 5, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[], outputs=[Data(name=&#39;restart&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 5, 1, 0, 0)}, type=&#39;file&#39;, src=&#39;restart&#39;, format=None, available=False)], wait_on=[], command=&#39;tests/files/scripts/shell_task.sh&#39;, cli_arguments=_CliArgsBaseModel(positional=[&#39;data1&#39;, &#39;data2&#39;], keyword={&#39;&#45;&#45;restart&#39;: &#39;restart&#39;, &#39;&#45;&#45;init&#39;: &#39;initial_conditions&#39;}, flags=[&#39;&#45;&#45;test&#39;], source_file=None), src=None)&#45;&#45;Data(name=&#39;restart&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 5, 1, 0, 0)}, type=&#39;file&#39;, src=&#39;restart&#39;, format=None, available=False) -->
<g id="edge1" class="edge">
<title>ShellTask(name='shell_task', coordinates={'date': datetime.datetime(2026, 5, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[], outputs=[Data(name='restart', coordinates={'date': datetime.datetime(2026, 5, 1, 0, 0)}, type='file', src='restart', format=None, available=False)], wait_on=[], command='tests/files/scripts/shell_task.sh', cli_arguments=_CliArgsBaseModel(positional=['data1', 'data2'], keyword={'--restart': 'restart', '--init': 'initial_conditions'}, flags=['--test'], source_file=None), src=None)--Data(name='restart', coordinates={'date': datetime.datetime(2026, 5, 1, 0, 0)}, type='file', src='restart', format=None, available=False)</title>
<path fill="none" stroke="#77767b" stroke-width="1.5" d="M636,-175.76C636,-158.8 636,-133.05 636,-116.13"/>
</g>
<!-- Data(name=&#39;restart&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 1, 1, 0, 0)}, type=&#39;file&#39;, src=&#39;restart&#39;, format=None, available=False) -->
<g id="node3" class="node">
<title>Data(name='restart', coordinates={'date': datetime.datetime(2026, 1, 1, 0, 0)}, type='file', src='restart', format=None, available=False)</title>
<g id="a_node3"><a xlink:title="restart&#10; &#160;date: 2026-01-01 00:00:00">
<ellipse fill="#d9ebff" stroke="#001933" stroke-width="2" cx="106" cy="-26" rx="40.5" ry="18"/>
<text text-anchor="middle" x="106" y="-22.3" font-family="Fira Sans" font-size="14.00" fill="#001226">restart</text>
</a>
</g>
</g>
<!-- ShellTask(name=&#39;shell_task&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 1, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[Data(name=&#39;initial_conditions&#39;, coordinates={}, type=&#39;file&#39;, src=&#39;tests/files/data/initial_conditions&#39;, format=None, available=True)], outputs=[Data(name=&#39;restart&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 1, 1, 0, 0)}, type=&#39;file&#39;, src=&#39;restart&#39;, format=None, available=False)], wait_on=[], command=&#39;tests/files/scripts/shell_task.sh&#39;, cli_arguments=_CliArgsBaseModel(positional=[&#39;data1&#39;, &#39;data2&#39;], keyword={&#39;&#45;&#45;restart&#39;: &#39;restart&#39;, &#39;&#45;&#45;init&#39;: &#39;initial_conditions&#39;}, flags=[&#39;&#45;&#45;test&#39;], source_file=None), src=None) -->
<g id="node4" class="node">
<title>ShellTask(name='shell_task', coordinates={'date': datetime.datetime(2026, 1, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[Data(name='initial_conditions', coordinates={}, type='file', src='tests/files/data/initial_conditions', format=None, available=True)], outputs=[Data(name='restart', coordinates={'date': datetime.datetime(2026, 1, 1, 0, 0)}, type='file', src='restart', format=None, available=False)], wait_on=[], command='tests/files/scripts/shell_task.sh', cli_arguments=_CliArgsBaseModel(positional=['data1', 'data2'], keyword={'--restart': 'restart', '--init': 'initial_conditions'}, flags=['--test'], source_file=None), src=None)</title>
<g id="a_node4"><a xlink:title="shell_task&#10; &#160;date: 2026-01-01 00:00:00">
<polygon fill="#ffd9e0" stroke="#330009" stroke-width="2" points="148.5,-116 63.5,-116 63.5,-80 148.5,-80 148.5,-116"/>
<text text-anchor="middle" x="106" y="-94.3" font-family="Fira Sans" font-size="14.00" fill="#260007">shell_task</text>
</a>
</g>
</g>
<!-- ShellTask(name=&#39;shell_task&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 1, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[Data(name=&#39;initial_conditions&#39;, coordinates={}, type=&#39;file&#39;, src=&#39;tests/files/data/initial_conditions&#39;, format=None, available=True)], outputs=[Data(name=&#39;restart&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 1, 1, 0, 0)}, type=&#39;file&#39;, src=&#39;restart&#39;, format=None, available=False)], wait_on=[], command=&#39;tests/files/scripts/shell_task.sh&#39;, cli_arguments=_CliArgsBaseModel(positional=[&#39;data1&#39;, &#39;data2&#39;], keyword={&#39;&#45;&#45;restart&#39;: &#39;restart&#39;, &#39;&#45;&#45;init&#39;: &#39;initial_conditions&#39;}, flags=[&#39;&#45;&#45;test&#39;], source_file=None), src=None)&#45;&#45;Data(name=&#39;restart&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 1, 1, 0, 0)}, type=&#39;file&#39;, src=&#39;restart&#39;, format=None, available=False) -->
<g id="edge2" class="edge">
<title>ShellTask(name='shell_task', coordinates={'date': datetime.datetime(2026, 1, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[Data(name='initial_conditions', coordinates={}, type='file', src='tests/files/data/initial_conditions', format=None, available=True)], outputs=[Data(name='restart', coordinates={'date': datetime.datetime(2026, 1, 1, 0, 0)}, type='file', src='restart', format=None, available=False)], wait_on=[], command='tests/files/scripts/shell_task.sh', cli_arguments=_CliArgsBaseModel(positional=['data1', 'data2'], keyword={'--restart': 'restart', '--init': 'initial_conditions'}, flags=['--test'], source_file=None), src=None)--Data(name='restart', coordinates={'date': datetime.datetime(2026, 1, 1, 0, 0)}, type='file', src='restart', format=None, available=False)</title>
<path fill="none" stroke="#77767b" stroke-width="1.5" d="M106,-79.7C106,-68.85 106,-54.92 106,-44.1"/>
</g>
<!-- Data(name=&#39;restart&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 3, 1, 0, 0)}, type=&#39;file&#39;, src=&#39;restart&#39;, format=None, available=False) -->
<g id="node5" class="node">
<title>Data(name='restart', coordinates={'date': datetime.datetime(2026, 3, 1, 0, 0)}, type='file', src='restart', format=None, available=False)</title>
<g id="a_node5"><a xlink:title="restart&#10; &#160;date: 2026-03-01 00:00:00">
<ellipse fill="#d9ebff" stroke="#001933" stroke-width="2" cx="380" cy="-98" rx="40.5" ry="18"/>
<text text-anchor="middle" x="380" y="-94.3" font-family="Fira Sans" font-size="14.00" fill="#001226">restart</text>
</a>
</g>
</g>
<!-- ShellTask(name=&#39;shell_task&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 3, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[], outputs=[Data(name=&#39;restart&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 3, 1, 0, 0)}, type=&#39;file&#39;, src=&#39;restart&#39;, format=None, available=False)], wait_on=[], command=&#39;tests/files/scripts/shell_task.sh&#39;, cli_arguments=_CliArgsBaseModel(positional=[&#39;data1&#39;, &#39;data2&#39;], keyword={&#39;&#45;&#45;restart&#39;: &#39;restart&#39;, &#39;&#45;&#45;init&#39;: &#39;initial_conditions&#39;}, flags=[&#39;&#45;&#45;test&#39;], source_file=None), src=None) -->
<g id="node6" class="node">
<title>ShellTask(name='shell_task', coordinates={'date': datetime.datetime(2026, 3, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[], outputs=[Data(name='restart', coordinates={'date': datetime.datetime(2026, 3, 1, 0, 0)}, type='file', src='restart', format=None, available=False)], wait_on=[], command='tests/files/scripts/shell_task.sh', cli_arguments=_CliArgsBaseModel(positional=['data1', 'data2'], keyword={'--restart': 'restart', '--init': 'initial_conditions'}, flags=['--test'], source_file=None), src=None)</title>
<g id="a_node6"><a xlink:title="shell_task&#10; &#160;date: 2026-03-01 00:00:00">
<polygon fill="#ffd9e0" stroke="#330009" stroke-width="2" points="422.5,-212 337.5,-212 337.5,-176 422.5,-176 422.5,-212"/>
<text text-anchor="middle" x="380" y="-190.3" font-family="Fira Sans" font-size="14.00" fill="#260007">shell_task</text>
</a>
</g>
</g>
<!-- ShellTask(name=&#39;shell_task&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 3, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[], outputs=[Data(name=&#39;restart&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 3, 1, 0, 0)}, type=&#39;file&#39;, src=&#39;restart&#39;, format=None, available=False)], wait_on=[], command=&#39;tests/files/scripts/shell_task.sh&#39;, cli_arguments=_CliArgsBaseModel(positional=[&#39;data1&#39;, &#39;data2&#39;], keyword={&#39;&#45;&#45;restart&#39;: &#39;restart&#39;, &#39;&#45;&#45;init&#39;: &#39;initial_conditions&#39;}, flags=[&#39;&#45;&#45;test&#39;], source_file=None), src=None)&#45;&#45;Data(name=&#39;restart&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 3, 1, 0, 0)}, type=&#39;file&#39;, src=&#39;restart&#39;, format=None, available=False) -->
<g id="edge3" class="edge">
<title>ShellTask(name='shell_task', coordinates={'date': datetime.datetime(2026, 3, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[], outputs=[Data(name='restart', coordinates={'date': datetime.datetime(2026, 3, 1, 0, 0)}, type='file', src='restart', format=None, available=False)], wait_on=[], command='tests/files/scripts/shell_task.sh', cli_arguments=_CliArgsBaseModel(positional=['data1', 'data2'], keyword={'--restart': 'restart', '--init': 'initial_conditions'}, flags=['--test'], source_file=None), src=None)--Data(name='restart', coordinates={'date': datetime.datetime(2026, 3, 1, 0, 0)}, type='file', src='restart', format=None, available=False)</title>
<path fill="none" stroke="#77767b" stroke-width="1.5" d="M380,-175.76C380,-158.8 380,-133.05 380,-116.13"/>
</g>
<!-- Data(name=&#39;initial_conditions&#39;, coordinates={}, type=&#39;file&#39;, src=&#39;tests/files/data/initial_conditions&#39;, format=None, available=True) -->
<g id="node7" class="node">
<title>Data(name='initial_conditions', coordinates={}, type='file', src='tests/files/data/initial_conditions', format=None, available=True)</title>
<g id="a_node7"><a xlink:title="initial_conditions">
<ellipse fill="#dcffd9" stroke="#053300" stroke-width="2" cx="106" cy="-194" rx="86" ry="18"/>
<text text-anchor="middle" x="106" y="-190.3" font-family="Fira Sans" font-size="14.00" fill="#042600">initial_conditions</text>
</a>
</g>
</g>
<!-- Data(name=&#39;initial_conditions&#39;, coordinates={}, type=&#39;file&#39;, src=&#39;tests/files/data/initial_conditions&#39;, format=None, available=True)&#45;&#45;ShellTask(name=&#39;shell_task&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 1, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[Data(name=&#39;initial_conditions&#39;, coordinates={}, type=&#39;file&#39;, src=&#39;tests/files/data/initial_conditions&#39;, format=None, available=True)], outputs=[Data(name=&#39;restart&#39;, coordinates={&#39;date&#39;: datetime.datetime(2026, 1, 1, 0, 0)}, type=&#39;file&#39;, src=&#39;restart&#39;, format=None, available=False)], wait_on=[], command=&#39;tests/files/scripts/shell_task.sh&#39;, cli_arguments=_CliArgsBaseModel(positional=[&#39;data1&#39;, &#39;data2&#39;], keyword={&#39;&#45;&#45;restart&#39;: &#39;restart&#39;, &#39;&#45;&#45;init&#39;: &#39;initial_conditions&#39;}, flags=[&#39;&#45;&#45;test&#39;], source_file=None), src=None) -->
<g id="edge4" class="edge">
<title>Data(name='initial_conditions', coordinates={}, type='file', src='tests/files/data/initial_conditions', format=None, available=True)--ShellTask(name='shell_task', coordinates={'date': datetime.datetime(2026, 1, 1, 0, 0)}, host=None, account=None, uenv=None, nodes=None, walltime=None, inputs=[Data(name='initial_conditions', coordinates={}, type='file', src='tests/files/data/initial_conditions', format=None, available=True)], outputs=[Data(name='restart', coordinates={'date': datetime.datetime(2026, 1, 1, 0, 0)}, type='file', src='restart', format=None, available=False)], wait_on=[], command='tests/files/scripts/shell_task.sh', cli_arguments=_CliArgsBaseModel(positional=['data1', 'data2'], keyword={'--restart': 'restart', '--init': 'initial_conditions'}, flags=['--test'], source_file=None), src=None)</title>
<path fill="none" stroke="#77767b" stroke-width="1.5" d="M106,-175.76C106,-158.8 106,-133.05 106,-116.13"/>
</g>
</g>
<style>/* https://github.com/BartBrood/Interactive-Graphviz-Diagrams */

/* MIT License */

/* Copyright (c) 2024 BartBrood */

/* Permission is hereby granted, free of charge, to any person obtaining a copy */
/* of this software and associated documentation files (the "Software"), to deal */
/* in the Software without restriction, including without limitation the rights */
/* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell */
/* copies of the Software, and to permit persons to whom the Software is */
/* furnished to do so, subject to the following conditions: */

/* The above copyright notice and this permission notice shall be included in all */
/* copies or substantial portions of the Software. */

/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR */
/* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, */
/* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE */
/* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER */
/* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, */
/* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE */
/* SOFTWARE. */


/* The first 2 styles are hiding longer description texts on */
/* nodes and edges, that are shown when nodes are clicked */
/* .edge text{ */
/*     opacity: 0; */
/* } */
/* .node text:not(:first-of-type){ */
/*     opacity: 0; */
/* } */

.text-highlight-nodes text{
    opacity: 1 !important;
    stroke-width: 5;
    font-size: 20px;
    font-weight: bold;
    fill: black;
}
.text-highlight-edges text{
    opacity: 1 !important;
    stroke-width: 5;
    font-size: 20px;
    font-weight: bold;
    fill: Indigo;
}
.edge-highlight path{
    opacity: 1;
    stroke-width: 5;
    stroke: crimson;
}
.edge-highlight polygon{
    opacity: 1;
    stroke-width: 5;
    stroke: crimson;
}
.node-highlight polygon{
    opacity: 1;
    stroke-width: 5;
    stroke: crimson;
    z-index:99999;
}
.node-highlight ellipse{
    opacity: 1;
    stroke-width: 5;
    stroke: crimson;
    z-index:99999;
}
.node-highlight path{
    opacity: 1;
    stroke-width: 5;
    stroke: crimson;
    z-index:99999;
}
.compass {
    fill: #fff;
    stroke: #000;
    stroke-width: 1;
}
.plus-minus {
    fill: #fff;
    pointer-events: none;
}
</style><script><![CDATA[// https://github.com/BartBrood/Interactive-Graphviz-Diagrams

// MIT License

// Copyright (c) 2024 BartBrood

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

function addInteractivity(evt) {

    var svg = evt.target;
    var edges = document.getElementsByClassName('edge');
    var nodes = document.getElementsByClassName('node');
    var clusters = document.getElementsByClassName('cluster');
    var selectedElement, offset, transform, nodrag, origmousepos;

    svg.addEventListener('mousedown', startDrag);
    svg.addEventListener('mousemove', drag);
    svg.addEventListener('mouseup', endDrag);
    svg.addEventListener('mouseleave', endDrag);
    svg.addEventListener('touchstart', startDrag);
    svg.addEventListener('touchmove', drag);
    svg.addEventListener('touchend', endDrag);
    svg.addEventListener('touchleave', endDrag);
    svg.addEventListener('touchcancel', endDrag);

    for (var i = 0; i < edges.length; i++) {
        edges[i].addEventListener('click', clickEdge);
    }

    for (var i = 0; i < nodes.length; i++) {
        nodes[i].addEventListener('click', clickNode);
    }

    var svg = document.querySelector('svg');
    var viewBox = svg.viewBox.baseVal;
    adjustViewBox(svg);

    function getMousePosition(evt) {
        var CTM = svg.getScreenCTM();
        if (evt.touches) { evt = evt.touches[0]; }
        return {
            x: (evt.clientX - CTM.e) / CTM.a,
            y: (evt.clientY - CTM.f) / CTM.d
        };
    }

    function startDrag(evt) {
        origmousepos = getMousePosition(evt);
        nodrag=true;
        selectedElement = evt.target.parentElement;
        if (selectedElement){
            offset = getMousePosition(evt);

            // Make sure the first transform on the element is a translate transform
            var transforms = selectedElement.transform.baseVal;

            if (transforms.length === 0 || transforms.getItem(0).type !== SVGTransform.SVG_TRANSFORM_TRANSLATE) {
                // Create an transform that translates by (0, 0)
                var translate = svg.createSVGTransform();
                translate.setTranslate(0, 0);
                selectedElement.transform.baseVal.insertItemBefore(translate, 0);
            }

            // Get initial translation
            transform = transforms.getItem(0);
            offset.x -= transform.matrix.e;
            offset.y -= transform.matrix.f;
        }
    }

    function drag(evt) {
        if (selectedElement) {
            evt.preventDefault();
            var coord = getMousePosition(evt);
            transform.setTranslate(coord.x - offset.x, coord.y - offset.y);
        }
    }

    function endDrag(evt) {
            <!-- comment out the following line if you wnat drags to stay in place, with this line they snap back to their original position after drag end -->
            //if statement to avoid the header section being affected by the translate (0,0)
        if (selectedElement){
            if (selectedElement.classList.contains('header')){
                selectedElement = false;
            } else {
                selectedElement = false;
                transform.setTranslate(0,0);
            }
        }
        var currentmousepos=getMousePosition(evt);
        if (currentmousepos.x===origmousepos.x|currentmousepos.y===origmousepos.y){
            nodrag=true;
        } else {
            nodrag=false;
        }

    }

    function clickEdge() {
        if (nodrag) {
            if (this.classList.contains("edge-highlight")){
                this.classList.remove("edge-highlight");
                this.classList.remove("text-highlight-edges");
            }
            else {
                this.classList.add("edge-highlight");
                this.classList.add("text-highlight-edges");
                animateEdge(this);
            }
        }
    }

    function clickNode() {
        if (nodrag) {
            var nodeName = this.childNodes[1].textContent;
            // Escape special characters in the node name
            var nodeNameEscaped = nodeName.replace(/[-[\]{}()*+!<=:?.\/\\^$|#\s,]/g, '\\$&');

            var patroon = new RegExp('^' + nodeNameEscaped + '->|->' + nodeNameEscaped + '$|' + nodeNameEscaped + '--|--' + nodeNameEscaped + '$')

            if (this.classList.contains("node-highlight")) {
                this.classList.remove("node-highlight");
                this.classList.remove("text-highlight-nodes");
                var edges = document.getElementsByClassName('edge');
                for (var i = 0; i < edges.length; i++) {
                    if (patroon.test(edges[i].childNodes[1].textContent)) {
                        edges[i].classList.remove("edge-highlight");
                        edges[i].classList.remove("text-highlight-edges");
                    }
                }
            } else {
                this.classList.add("node-highlight");
                this.classList.add("text-highlight-nodes");
                var edges = document.getElementsByClassName('edge');
                for (var i = 0; i < edges.length; i++) {
                    if (patroon.test(edges[i].childNodes[1].textContent)) {
                        edges[i].classList.add("edge-highlight");
                        edges[i].classList.add("text-highlight-edges");
                        animateEdge(edges[i]);
                    }
                }
            }
        }
    }

    function animateEdge(edge){
        var path = edge.querySelector('path');
        var polygon = edge.querySelector('polygon');
        var length = path.getTotalLength();
        // Clear any previous transition
        path.style.transition = path.style.WebkitTransition = 'none';
        if (polygon){polygon.style.transition = polygon.style.WebkitTransition = 'none';};
        // Set up the starting positions
        path.style.strokeDasharray = length + ' ' + length;
        path.style.strokeDashoffset = length;
        if(polygon){polygon.style.opacity='0';};
        // Trigger a layout so styles are calculated & the browser
        // picks up the starting position before animating
        path.getBoundingClientRect();
        // Define our transition
        path.style.transition = path.style.WebkitTransition =
            'stroke-dashoffset 2s ease-in-out';
        if (polygon){polygon.style.transition = polygon.style.WebkitTransition =
                     'fill-opacity 1s ease-in-out 2s';};
        // Go!
        path.style.strokeDashoffset = '0';
        if (polygon){setTimeout(function(){polygon.style.opacity='1';},2000)};
    }
}

function adjustViewBox(svg) {
    var viewBoxParts = svg.getAttribute("viewBox").split(" ");
    var newYMin = parseFloat(viewBoxParts[1]) - 30; // Adjust this value as needed
    var newYMax = parseFloat(viewBoxParts[3]) + 30; // Adjust this value as needed
    var newXMax = Math.max(parseFloat(viewBoxParts[2]),240);
    var newViewBox = viewBoxParts[0] + " " + newYMin + " " + newXMax + " " + newYMax;
    svg.setAttribute("viewBox", newViewBox);
}
]]></script></svg>