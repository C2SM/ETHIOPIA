start_date: &root_start_date '2026-01-01T00:00'
end_date: &root_end_date '2027-01-01T00:00'
cycles:
  init:
    tasks:
      Extpar:
        argument:
          input: obs_data
        input:
          - obs_data
        output:
          - extpar_file
  icon:
    period: 'P2M'
    tasks:
      preproc:
        input:
          - grid_file
          - extpar_file:
              date: *root_start_date
          - ERA5
        argument:
          g: grid_file
          p: extpar_file 
          e: ERA5
        output:
          - icon_input
        depends:
          - ICON:
              lag: '-P4M'
      ICON:
        input:
          - grid_file
          - icon_input
          - icon_restart:
              lag: '-P2M'
        argument:
          g: grid_file
          input: icon_input
          restart: icon_restart
        output:
          - stream_1
          - stream_2
          - icon_restart
      postproc 1:
        input:
          - stream_1
        argument:
          input: stream_1 
        output:
          - postout_1
      store & clean 1:
        input:
          - postout_1
          - stream_1
          - icon_input
        argument:
          input: postout_1
          stream: stream_1
          icon-input: icon_input
        output:
          - stored_data_1
  yearly:
    period: 'P1Y'
    tasks:
      postproc 2:
        input:
          - stream_2:
              lag: 'P0M' 
              #lag: ['P0M', 'P2M', 'P4M', 'P6M', 'P8M', 'P10M'] # TODO 
              # lag: ['P0M', 'P3M', 'P6M', 'P9M']
              #   lag: ['P0M', 'P4M', 'P8M']
              # lag: ['P0M', 'P6M']
        argument:
          input: stream_2
        output:
          - postout_2
      store & clean 2:
        input:
          - postout_2
          - stream_2:
               lag: 'P0M' 
               #lag: ['P0M', 'P2M', 'P4M', 'P6M', 'P8M', 'P10M'] # TODO
               # lag: ['P0M', 'P3M', 'P6M', 'P9M']
               # lag: ['P0M', 'P4M', 'P8M']
               # lag: ['P0M', 'P6M']
        argument:
          input: postout_2
          input2: stream_2
        output:
          - stored_data_2
# Each task and piece of data (input and output of tasks) used to
# define the graph is described in that section
tasks:
  root:
    # All tasks inherit the root task properties
    host: santis
    account: g110
  Extpar:
    plugin: extpar
    command: /path/to/exe
    config: path/to/namelists/dir
    uenv:
      squashfs: path/to/squashfs
      mount_point: runtime/mount/point
    nodes: 1
    walltime: '00:02:00'
  preproc:
    plugin: AiiDA Shell
    command: cleanup.sh
    nodes: 4
    walltime: '00:02:00'
    config: path/to/config/dir
    uenv:
      squashfs: path/to/squashfs
      mount_point: runtime/mount/point
  ICON:
    plugin: ICON
    nodes: 40
    walltime: '24:00:00'
    config: path/to/namelists/dir
    uenv:
      squashfs: path/to/squashfs
      mount_point: runtime/mount/point
    command: path/to/icon
  postproc 1:
    plugin: AiiDA Shell
    nodes: 2
    walltime: '00:05:00'
    src: path/to/src/dir
    command: "python3 main_script_ocn.py"
    conda_env: path/to/yaml/env/file
    uenv:
      squashfs: path/to/squashfs
      mount_point: runtime/mount/point
  postproc 2:
    plugin: AiiDA Shell
    nodes: 4
    walltime: '00:05:00'
    src: path/to/src/dir
    command: "python3 main_script_atm.py"
    conda_env: path/to/yaml/env/file
    uenv:
      squashfs: path/to/squashfs
      mount_point: runtime/mount/point
  store & clean 1:
    plugin: AiiDA Shell
    command: post_clean.sh
    nodes: 1
    walltime: '00:01:00'
    scipt: path/to/script
  store & clean 2:
    plugin: AiiDA Shell
    command: post_clean.sh
    nodes: 1
    walltime: '00:01:00'
    scipt: path/to/script

data:
  # Properties of data nodes
  grid_file: {type: file, src: /home/alexgo/code/AiiDA_WC/files/file.ncdf}
  obs_data: {type: dir, src: /home/alexgo/code/AiiDA_WC/files/}
  ERA5: {type: dir, src: /some/where/else}
  extpar_file: {type: file, src: output}
  icon_input: {type: file, src: output}
  icon_restart: {type: file, format: ncdf, src: restart}
  stream_1: {type: file, src: output_1}
  stream_2: {type: file, src: output_2}
  postout_1: {type: file, src: output}
  postout_2: {type: file, src: output}
  stored_data_1: {type: dir, src: /store/some/where_1}
  stored_data_2: {type: dir, src: /store/some/where_2}
